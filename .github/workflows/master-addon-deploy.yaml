name: Deploy addons
on:
  push:
    branches:
      - master

jobs:
  check-addon-changes:
    runs-on: ubuntu-latest
    outputs:
      changedAddons: ${{ steps.filter.outputs.changes }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Detect chanced files
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/paths-filter.yml

  build-image:
    name: Build changed addons
    if: ${{ needs.check-addon-changes.outputs.changedAddons != '[]' }}
    runs-on: ubuntu-latest
    needs: check-addon-changes
    strategy:
      matrix:
        addon: ${{ fromJSON(needs.check-addon-changes.outputs.changedAddons) }}
    container:
      image: homeassistant/amd64-builder:2021.03.4
      options: --rm --privileged
    env:
      DOCKER_BUILDKIT: 1
    steps:
      
      - name: Git install
        run: |
          apk add --no-cache git

      - name: Checkout
        uses: actions/checkout@v2

      - name: Detect chanced files
        id: files-check
        uses: dorny/paths-filter@v2.9.0
        with:
          filters: |
            changed:
              - ${{matrix.addon}}/**

      - name: Get config
        id: config
        if: steps.files-check.outputs.changed == 'true'
        shell: bash
        run: |
          IFS='/' read -r registry imagetemplate <<< "$(jq -r '.image' "${{ matrix.addon }}/config.json")"
          name=$(jq -r '.name' "${{ matrix.addon }}/config.json")
          description=$(jq -r '.description' "${{ matrix.addon }}/config.json")
          version=$(jq -r '.version' "${{ matrix.addon }}/config.json")
          archs=$(jq -r '.arch // ["armv7", "armhf", "amd64", "aarch64", "i386"] | [.[] | .] | join(" ")' "${{ matrix.addon }}/config.json")
          archs_param=$(jq -r '.arch // ["armv7", "armhf", "amd64", "aarch64", "i386"] | [.[] | "--" + .] | join(" ")' ${{ matrix.addon }}/config.json)

          image_names=""
          if [[ "$imagetemplate" != 'null' ]]; then
            for arch in ${archs}; do
              image_names="${image_names} ${registry}/${imagetemplate/\{arch\}/$arch}"
            done
          fi

          echo "Docker Registry: $registry"
          echo "Imagetemplate: $imagetemplate"
          echo "Version: $version"
          echo "Architectures: $archs"
          echo "Images: $image_names"

          echo "::set-output name=name::$name"
          echo "::set-output name=description::$description"
          echo "::set-output name=registry::$registry"
          echo "::set-output name=imagetemplate::$imagetemplate"
          echo "::set-output name=version::$version"
          echo "::set-output name=archs_param::$archs_param"
          echo "::set-output name=image_names::$image_names"

      - name: Build addon
        if: steps.files-check.outputs.changed == 'true'
        run: >
          /usr/bin/builder.sh
          ${{ steps.config.outputs.archs_param }}
          -t ${{ matrix.addon }}
          -d ${{ steps.config.outputs.registry }}
          -i ${{ steps.config.outputs.imagetemplate }}
          --cache-tag cache
          --no-latest
          --test

      - name: Check images
        if: steps.files-check.outputs.changed == 'true'
        shell: bash
        run: |
          missing=0
          for image_name in ${{ steps.config.outputs.image_names }}; do
            if [[ "$(docker images -q "$image_name:${{ steps.config.outputs.version }}" 2> /dev/null)" == "" ]]; then
              echo "::error::No local image for $image_name found."
              missing=$((missing + 1))
            else
              echo "Image $image_name found."

              entrypoint=$(docker inspect "$image_name:${{ steps.config.outputs.version }}" | jq --raw-output '.[].Config.Entrypoint[]' 2>/dev/null || echo '')
              cmd=$(docker inspect "$image_name:${{ steps.config.outputs.version }}" | jq --raw-output '.[].Config.Cmd[]' 2>/dev/null || echo '')
              if [ -n "$cmd" ] || ([ "$entrypoint" != "/init" ] && [ "$entrypoint" != "/run.sh" ]); then
                echo "::error::Invalid docker entrypoint found (Detected Entrypoint: '${entrypoint}', Detected Cmd: '${cmd}')"
                exit 1
              fi
              
            fi
          done
          if [ "$missing" -gt "0" ]; then
            docker images
            exit 1
          fi

      - name: Add docker image labels and tags
        if: steps.files-check.outputs.changed == 'true'
        shell: bash
        run: |
          for image_name in ${{ steps.config.outputs.image_names }}; do
            echo "FROM $image_name:${{ steps.config.outputs.version }}" | docker build \
              --label org.opencontainers.image.title="${{ steps.config.outputs.name }}" \
              --label org.opencontainers.image.description="${{ steps.config.outputs.description }}" \
              --label org.opencontainers.image.authors="Poeschl <Poeschl@users.noreply.github.com>" \
              --label org.opencontainers.image.licenses="Apache License 2.0" \
              --label org.opencontainers.image.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
              --label org.opencontainers.image.source="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/master/${{ matrix.addon }}" \
              --label org.opencontainers.image.documentation="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/master/${{ matrix.addon }}" \
              --label org.opencontainers.image.created="$(date -Is)" \
              --label org.opencontainers.image.revision="${GITHUB_SHA}" \
              --label org.opencontainers.image.version="${{ steps.config.outputs.version }}" \
              -t "$image_name:${{ steps.config.outputs.version }}" -

            echo "FROM $image_name:${{ steps.config.outputs.version }}" | docker build \
              --label org.opencontainers.image.version=cache \
              -t "$image_name:cache" -
          done

      - name: Docker Login
        if: steps.files-check.outputs.changed == 'true'
        uses: docker/login-action@v1.8.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Push images
        if: steps.files-check.outputs.changed == 'true'
        shell: bash
        run: |
          for image_name in ${{ steps.config.outputs.image_names }}; do
            docker push "$image_name:cache"
            docker push "$image_name:${{ steps.config.outputs.version }}"
          done
